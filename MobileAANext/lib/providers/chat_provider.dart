// lib/providers/chat_provider.dart

import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/chat_room.dart';
import '../models/friend.dart';

class ChatProvider extends ChangeNotifier {
  List<ChatRoom> _rooms = [];
  List<Friend> _friends = [];

  List<ChatRoom> get rooms => _rooms;
  List<Friend> get friends => _friends;

  Future<void> init() async {
    await _loadFromStorage();
    
    // Eƒüer data yoksa mock data kullan
    if (_rooms.isEmpty) {
      _rooms = ChatRoom.getMockRooms();
      _friends = Friend.getMockFriends();
      await _saveToStorage();
    }
    
    notifyListeners();
  }

  // Odaya mesaj g√∂nder (text)
  void sendTextMessage(String roomId, String text) {
    final roomIndex = _rooms.indexWhere((r) => r.id == roomId);
    if (roomIndex == -1) return;

    final message = ChatMessage(
      id: 'msg_${DateTime.now().millisecondsSinceEpoch}',
      senderId: 'current_user',
      senderName: 'Sen',
      timestamp: DateTime.now(),
      type: MessageType.text,
      text: text,
    );

    _rooms[roomIndex].messages.add(message);
    _saveToStorage();
    notifyListeners();

    debugPrint('üí¨ Text message sent to ${_rooms[roomIndex].name}');
  }

  // Odaya haber payla≈ü
  void shareNewsToRoom({
    required String roomId,
    required String newsId,
    required String newsTitle,
    required String newsImageUrl,
    required String emoji,
    required bool includeDetail,
  }) {
    final roomIndex = _rooms.indexWhere((r) => r.id == roomId);
    if (roomIndex == -1) return;

    // AI mesaj √ºret
    final autoText = ChatMessage.generateShareMessage(
      emoji,
      newsTitle,
      includeDetail,
    );

    final message = ChatMessage(
      id: 'msg_${DateTime.now().millisecondsSinceEpoch}',
      senderId: 'current_user',
      senderName: 'Sen',
      timestamp: DateTime.now(),
      type: MessageType.news_share,
      newsId: newsId,
      newsTitle: newsTitle,
      newsImageUrl: newsImageUrl,
      emoji: emoji,
      includeDetail: includeDetail,
      autoGeneratedText: autoText,
    );

    _rooms[roomIndex].messages.add(message);
    _saveToStorage();
    notifyListeners();

    debugPrint('üì∞ News shared to ${_rooms[roomIndex].name}: $newsTitle');
  }

  // Oda olu≈ütur
  void createRoom(String name, String emoji, List<String> memberIds) {
    final room = ChatRoom(
      id: 'room_${DateTime.now().millisecondsSinceEpoch}',
      name: name,
      emoji: emoji,
      memberIds: memberIds,
      messages: [],
      lastMessageAt: DateTime.now(),
    );

    _rooms.insert(0, room);
    _saveToStorage();
    notifyListeners();

    debugPrint('‚úÖ Room created: $name');
  }

  // Arkada≈ü ekle
  void addFriend(Friend friend) {
    if (_friends.any((f) => f.id == friend.id)) return;
    
    _friends.add(friend);
    _saveToStorage();
    notifyListeners();

    debugPrint('‚úÖ Friend added: ${friend.name}');
  }

  // Arkada≈ü √ßƒ±kar
  void removeFriend(String friendId) {
    _friends.removeWhere((f) => f.id == friendId);
    _saveToStorage();
    notifyListeners();

    debugPrint('‚ùå Friend removed: $friendId');
  }

  // Storage'a kaydet
  Future<void> _saveToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final roomsData = _rooms.map((r) => r.toJson()).toList();
      await prefs.setString('chat_rooms', jsonEncode(roomsData));
      
      final friendsData = _friends.map((f) => f.toJson()).toList();
      await prefs.setString('friends', jsonEncode(friendsData));
      
    } catch (e) {
      debugPrint('Save error: $e');
    }
  }

  // Storage'dan y√ºkle
  Future<void> _loadFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Rooms
      final roomsStr = prefs.getString('chat_rooms');
      if (roomsStr != null) {
        final List<dynamic> roomsData = jsonDecode(roomsStr);
        _rooms = roomsData.map((json) => ChatRoom.fromJson(json)).toList();
      }
      
      // Friends
      final friendsStr = prefs.getString('friends');
      if (friendsStr != null) {
        final List<dynamic> friendsData = jsonDecode(friendsStr);
        _friends = friendsData.map((json) => Friend.fromJson(json)).toList();
      }
      
      debugPrint('‚úÖ Loaded ${_rooms.length} rooms, ${_friends.length} friends');
    } catch (e) {
      debugPrint('Load error: $e');
    }
  }

  // Clear all
  void clearAll() {
    _rooms.clear();
    _friends.clear();
    _saveToStorage();
    notifyListeners();
  }
}