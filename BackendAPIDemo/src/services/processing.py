# ================================
# src/services/processing.py - Updated Media Processing with Reel Integration
# ================================

"""
Processing Service - TTS, Image, Video i≈üleme
Provider'larƒ± kullanarak media processing
TTS i≈üleminden sonra otomatik reel olu≈üturma entegrasyonu
"""

from typing import Dict, Any, List, Optional
from pathlib import Path
from datetime import datetime
from ..models.tts import TTSRequest, TTSResponse, AudioResult, TTSVoice, TTSModel
from ..models.news import Article
from ..models.reels_tracking import ReelFeedItem
from ..providers import get_provider
from ..config import settings

class ProcessingService:
    """Media processing service with reel integration"""
    
    def __init__(self):
        self.tts_provider_name = f"tts_{settings.tts_provider}"
    
    # ============ CORE TTS METHODS ============
    
    async def text_to_speech(self, request: TTSRequest, create_reel: bool = False, 
                           article: Optional[Article] = None) -> TTSResponse:
        """
        Text'i sese √ßevir ve isteƒüe baƒülƒ± olarak reel olu≈ütur
        
        Args:
            request: TTS request
            create_reel: TTS'den sonra reel olu≈üturulsun mu
            article: Reel olu≈üturmak i√ßin article verisi
        """
        try:
            # Provider'ƒ± al
            provider = get_provider(self.tts_provider_name)
            if not provider:
                return TTSResponse(
                    success=False,
                    message=f"TTS provider '{self.tts_provider_name}' not found",
                    result=AudioResult(
                        success=False,
                        error_message="Provider not found"
                    )
                )
            
            # Business rules: text validation
            if len(request.text.strip()) < 10:
                return TTSResponse(
                    success=False,
                    message="Text too short (minimum 10 characters)",
                    result=AudioResult(
                        success=False,
                        error_message="Text too short"
                    )
                )
            
            if len(request.text) > 50000:
                return TTSResponse(
                    success=False,
                    message="Text too long (maximum 50000 characters)", 
                    result=AudioResult(
                        success=False,
                        error_message="Text too long"
                    )
                )
            
            # Provider'dan TTS yap
            result = await provider["convert_to_speech"](
                text=request.text,
                voice=request.voice,
                model=request.model,
                speed=request.speed
            )
            
            # TTS ba≈üarƒ±lƒ± ve reel olu≈üturma isteniyorsa
            if result.success and create_reel and article:
                try:
                    # Reels analytics service'i import et
                    from ..services.reels_analytics import reels_analytics
                    
                    # Reel olu≈ütur
                    reel = await reels_analytics.create_reel_from_article(
                        article=article,
                        audio_url=result.file_url or "/audio/unknown.mp3",
                        duration_seconds=int(result.duration_seconds or 30),
                        file_size_mb=result.file_size_bytes / (1024*1024) if result.file_size_bytes else 1.0,
                        voice_used=request.voice,
                        estimated_cost=result.estimated_cost
                    )
                    
                    print(f"‚úÖ Auto-created reel: {reel.id} from TTS")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Reel creation failed after TTS: {e}")
                    # TTS ba≈üarƒ±lƒ± olduƒüu i√ßin hatayƒ± ignore et, sadece log
            
            return TTSResponse(
                success=result.success,
                message="TTS conversion completed" if result.success else "TTS conversion failed",
                result=result
            )
            
        except Exception as e:
            print(f"‚ùå TTS service error: {e}")
            return TTSResponse(
                success=False,
                message=str(e),
                result=AudioResult(
                    success=False,
                    error_message=str(e)
                )
            )
    
    async def article_to_speech(self, 
                               article: Article, 
                               voice: str = None, 
                               model: str = None,
                               create_reel: bool = True) -> TTSResponse:
        """
        Makaleyi sese √ßevir ve otomatik reel olu≈ütur
        
        Args:
            article: Article objesi
            voice: TTS voice
            model: TTS model
            create_reel: Otomatik reel olu≈üturulsun mu (default: True)
        """
        try:
            # Article'dan TTS metni olu≈ütur
            tts_text = article.to_tts_content()
            
            # TTS request olu≈ütur
            request = TTSRequest(
                text=tts_text,
                voice=voice or settings.tts_voice,
                model=model or settings.tts_model
            )
            
            # TTS yap ve reel olu≈ütur
            return await self.text_to_speech(
                request=request, 
                create_reel=create_reel, 
                article=article
            )
            
        except Exception as e:
            print(f"‚ùå Article TTS error: {e}")
            return TTSResponse(
                success=False,
                message=str(e),
                result=AudioResult(success=False, error_message=str(e))
            )
    
    # ============ RSS-SPECIFIC TTS METHODS ============
    
    async def rss_news_to_speech(self, 
                                article: Article,
                                voice: str = None,
                                model: str = None,
                                use_summary_only: bool = True) -> TTSResponse:
        """
        RSS'den gelen haber i√ßin √∂zel TTS i≈ülemi
        Sadece ba≈ülƒ±k + √∂zet kullanƒ±r (reels i√ßin optimize)
        
        Args:
            article: RSS Article
            voice: TTS voice  
            model: TTS model
            use_summary_only: Sadece ba≈ülƒ±k+√∂zet kullan (reels i√ßin ideal)
        """
        try:
            # RSS haberleri i√ßin optimize edilmi≈ü metin
            if use_summary_only:
                # Sadece ba≈ülƒ±k + √∂zet (reels i√ßin perfect)
                tts_text = f"{article.title}"
                if article.summary and len(article.summary.strip()) > 0:
                    tts_text += f". {article.summary}"
                else:
                    # √ñzet yoksa i√ßerikten ilk 150 karakter al
                    content_preview = article.content[:150].strip()
                    if content_preview:
                        tts_text += f". {content_preview}..."
            else:
                # Full content (uzun video/podcast i√ßin)
                tts_text = article.to_tts_content()
            
            # TTS i√ßin ideal uzunluk kontrol√º (15-45 saniye arasƒ±)
            if len(tts_text) < 30:
                # √áok kƒ±sa, biraz daha i√ßerik ekle
                if article.content and len(article.content) > 100:
                    additional_content = article.content[:100].strip()
                    tts_text += f" {additional_content}..."
            
            # TTS request olu≈ütur
            request = TTSRequest(
                text=tts_text,
                voice=voice or "nova",  # RSS i√ßin default voice 
                model=model or "gpt-4o-mini-tts",  # GPT-4O Mini TTS model
                speed=1.1  # RSS haberleri i√ßin biraz hƒ±zlƒ±
            )
            
            print(f"üéôÔ∏è RSS TTS: {len(tts_text)} chars - {article.title[:50]}...")
            
            # TTS yap ve otomatik reel olu≈ütur
            return await self.text_to_speech(
                request=request,
                create_reel=True,  # RSS haberlerinden her zaman reel olu≈ütur
                article=article
            )
            
        except Exception as e:
            print(f"‚ùå RSS TTS error: {e}")
            return TTSResponse(
                success=False,
                message=f"RSS TTS failed: {str(e)}",
                result=AudioResult(success=False, error_message=str(e))
            )
    
    async def batch_rss_to_speech(self, 
                                 articles: List[Article],
                                 voice: str = None,
                                 model: str = None,
                                 max_concurrent: int = 3) -> List[TTSResponse]:
        """
        RSS makalelerini toplu sese √ßevir ve reel olu≈ütur
        √ñzel olarak RSS haberleri i√ßin optimize edilmi≈ü
        
        Args:
            articles: Article listesi
            voice: TTS voice
            model: TTS model  
            max_concurrent: Maksimum e≈ü zamanlƒ± i≈ülem
        """
        results = []
        processed = 0
        successful = 0
        
        print(f"üîÑ Starting batch RSS TTS: {len(articles)} articles")
        
        for i, article in enumerate(articles):
            try:
                print(f"üéµ [{i+1}/{len(articles)}] Processing: {article.title[:50]}...")
                
                # RSS optimized TTS
                result = await self.rss_news_to_speech(
                    article=article,
                    voice=voice,
                    model=model,
                    use_summary_only=True  # RSS i√ßin optimize
                )
                
                results.append(result)
                processed += 1
                
                if result.success:
                    successful += 1
                    duration = result.result.duration_seconds or 0
                    cost = result.result.estimated_cost or 0
                    print(f"   ‚úÖ Success: {duration:.1f}s, ${cost:.4f}")
                else:
                    print(f"   ‚ùå Failed: {result.message}")
                
                # Rate limiting i√ßin kƒ±sa bekleme
                if i < len(articles) - 1:  # Son item deƒüilse
                    import asyncio
                    await asyncio.sleep(0.5)  # 500ms delay
                    
            except Exception as e:
                print(f"   ‚ùå Exception: {e}")
                results.append(TTSResponse(
                    success=False,
                    message=str(e),
                    result=AudioResult(success=False, error_message=str(e))
                ))
                processed += 1
        
        # Summary
        total_cost = sum(r.result.estimated_cost for r in results if r.success)
        success_rate = (successful / processed * 100) if processed > 0 else 0
        
        print(f"üìä Batch RSS TTS completed:")
        print(f"   ‚úÖ Successful: {successful}/{processed} ({success_rate:.1f}%)")
        print(f"   üí∞ Total cost: ${total_cost:.4f}")
        print(f"   üé¨ Reels created: {successful} (auto-generated)")
        
        return results
    
    # ============ ENHANCED BATCH OPERATIONS ============
    
    async def batch_articles_to_speech(self, 
                                      articles: List[Article],
                                      voice: str = None,
                                      model: str = None,
                                      create_reels: bool = True,
                                      rss_optimized: bool = True) -> List[TTSResponse]:
        """
        Geli≈ümi≈ü toplu makale ses d√∂n√º≈üt√ºrme
        
        Args:
            articles: Article listesi
            voice: TTS voice
            model: TTS model
            create_reels: Otomatik reel olu≈ütur
            rss_optimized: RSS i√ßin optimize et (ba≈ülƒ±k+√∂zet)
        """
        
        if rss_optimized:
            # RSS i√ßin √∂zel optimize edilmi≈ü method kullan
            return await self.batch_rss_to_speech(articles, voice, model)
        else:
            # Eski full-content method
            return await self._legacy_batch_tts(articles, voice, model, create_reels)
    
    async def _legacy_batch_tts(self, articles: List[Article], voice: str, 
                               model: str, create_reels: bool) -> List[TTSResponse]:
        """Legacy batch TTS (full content i√ßin)"""
        results = []
        
        for i, article in enumerate(articles):
            print(f"üîÑ Processing article {i+1}/{len(articles)}: {article.title[:50]}...")
            
            result = await self.article_to_speech(
                article=article, 
                voice=voice, 
                model=model,
                create_reel=create_reels
            )
            results.append(result)
            
            # Ba≈üarƒ±lƒ± olanlarƒ± logla
            if result.success:
                filename = Path(result.result.file_path).name if result.result.file_path else 'unknown'
                print(f"‚úÖ TTS Success: {filename}")
            else:
                print(f"‚ùå TTS Failed: {result.message}")
        
        successful = sum(1 for r in results if r.success)
        print(f"üìä Legacy batch TTS completed: {successful}/{len(articles)} successful")
        
        return results
    
    # ============ RSS INTEGRATION UTILITIES ============
    
    async def create_reels_from_latest_news(self, 
                                          category: str = "guncel",
                                          count: int = 10,
                                          voice: str = None,
                                          min_chars: int = 50) -> Dict[str, Any]:
        """
        Son haberlerden otomatik reel olu≈ütur
        RSS ‚Üí TTS ‚Üí Reel pipeline'ƒ±
        
        Args:
            category: Haber kategorisi
            count: Ka√ß haber i≈ülenecek
            voice: TTS voice
            min_chars: Minimum karakter sayƒ±sƒ±
        """
        try:
            # Content service'i import et
            from ..services.content import content_service
            
            print(f"üì∞ Fetching latest news: {category}, count={count}")
            
            # RSS'den son haberleri al
            news_response = await content_service.get_latest_news(
                count=count * 2,  # Filtreleme i√ßin fazla al
                category=category,
                enable_scraping=True  # Detaylƒ± i√ßerik i√ßin
            )
            
            if not news_response.success:
                return {
                    "success": False,
                    "message": f"Failed to fetch news: {news_response.message}",
                    "reels_created": 0
                }
            
            # Filtreleme
            suitable_articles = []
            for article in news_response.articles:
                content_length = len(article.title + (article.summary or "") + article.content)
                if content_length >= min_chars:
                    suitable_articles.append(article)
                    if len(suitable_articles) >= count:
                        break
            
            if not suitable_articles:
                return {
                    "success": False,
                    "message": "No suitable articles found for TTS conversion",
                    "reels_created": 0
                }
            
            print(f"‚úÖ Found {len(suitable_articles)} suitable articles")
            
            # Batch TTS + Reel creation
            tts_results = await self.batch_rss_to_speech(
                articles=suitable_articles,
                voice=voice or "nova",  # Default nova voice
                model="gpt-4o-mini-tts"  # GPT-4O Mini TTS model
            )
            
            # Summary
            successful_reels = sum(1 for result in tts_results if result.success)
            total_cost = sum(r.result.estimated_cost for r in tts_results if r.success)
            
            return {
                "success": True,
                "message": f"Created {successful_reels} reels from latest news",
                "reels_created": successful_reels,
                "total_articles_processed": len(suitable_articles),
                "success_rate": round((successful_reels / len(suitable_articles)) * 100, 1),
                "total_cost": round(total_cost, 6),
                "category": category,
                "voice_used": voice or TTSVoice.MINI_DEFAULT
            }
            
        except Exception as e:
            print(f"‚ùå Create reels from news error: {e}")
            return {
                "success": False,
                "message": str(e),
                "reels_created": 0
            }
    
    # ============ EXISTING METHODS (Updated) ============
    
    async def get_tts_stats(self) -> Dict:
        """TTS istatistikleri al"""
        try:
            provider = get_provider(self.tts_provider_name)
            if not provider or "get_cost_stats" not in provider:
                return {"error": "Stats not available"}
            
            base_stats = await provider["get_cost_stats"]()
            
            # Reel creation stats ekle
            try:
                from ..services.reels_analytics import reels_analytics
                all_reels = await reels_analytics.get_all_published_reels()
                
                base_stats.update({
                    "reels_created": len(all_reels),
                    "avg_cost_per_reel": round(base_stats.get("total_cost", 0) / len(all_reels), 6) if all_reels else 0,
                    "total_reel_duration": sum(reel.duration_seconds for reel in all_reels)
                })
            except Exception as e:
                print(f"‚ö†Ô∏è Could not get reel stats: {e}")
            
            return base_stats
            
        except Exception as e:
            print(f"‚ùå TTS stats error: {e}")
            return {"error": str(e)}
    
    async def list_audio_files(self) -> List[Dict[str, Any]]:
        """Ses dosyalarƒ±nƒ± listele"""
        try:
            audio_dir = Path(settings.storage_base_path)
            if not audio_dir.exists():
                return []
            
            files = []
            for file_path in audio_dir.glob("*.mp3"):
                stat = file_path.stat()
                files.append({
                    "filename": file_path.name,
                    "path": str(file_path),
                    "size_bytes": stat.st_size,
                    "size_mb": round(stat.st_size / (1024 * 1024), 2),
                    "created_at": datetime.fromtimestamp(stat.st_ctime).isoformat(),
                    "download_url": f"/audio/{file_path.name}"
                })
            
            # Tarihe g√∂re sƒ±rala (en yeni √∂nce)
            files.sort(key=lambda x: x["created_at"], reverse=True)
            return files
            
        except Exception as e:
            print(f"‚ùå List audio files error: {e}")
            return []

# Global instance
processing_service = ProcessingService()