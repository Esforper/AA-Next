📚 BACKEND API ENTEGRASYON REHBERİ
Personalized News Reels API - Frontend Integration Guide
Versiyon: 1.0
Son Güncelleme: 2025-10-04
Backend URL: http://localhost:8000

📋 İÇİNDEKİLER

Genel Bakış
Kimlik Doğrulama
Ana Akışlar
API Endpoint'leri
Tracking Sistemi
Personalization Seviyeleri
Hata Yönetimi
Örnekler


1. GENEL BAKIŞ
Sistem Mimarisi
Frontend → API Gateway → Feed Generator → NLP Engine
                     ↓
                Analytics Service ← Preference Engine
Temel Kavramlar
Reel: Sesli haber içeriği (audio + metadata)
Feed: Kullanıcıya özel reel listesi
Tracking: Kullanıcı davranışlarını kaydetme
Personalization: 3 seviye (cold/warm/hot)

2. KİMLİK DOĞRULAMA
User ID Header (Zorunlu)
Tüm API çağrılarında bu header gönderilmeli:
httpX-User-ID: user_12345
Yeni Kullanıcı:
Frontend'de ilk açılışta unique ID oluştur:
javascript// localStorage'da sakla
let userId = localStorage.getItem('user_id');
if (!userId) {
  userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  localStorage.setItem('user_id', userId);
}

// Her API çağrısında kullan
const headers = {
  'X-User-ID': userId,
  'Content-Type': 'application/json'
};

3. ANA AKIŞLAR
3.1 Uygulama İlk Açılış
1. User ID oluştur/yükle
2. GET /api/reels/feed (ilk feed)
3. Reels göster
4. İzleme tracking başlat
3.2 Reel İzleme Döngüsü
1. Kullanıcı reel izlemeye başlar
   → startTracking(reel)
   
2. Audio oynatılır
   → Her 5 saniyede tracking güncelle
   
3. Kullanıcı emoji atar (opsiyonel)
   → Emoji bilgisini kaydet
   
4. Kullanıcı "Detayları Oku" tıklar (opsiyonel)
   → Detail modal aç
   → Detail tracking başlat
   
5. Reel biter veya skip edilir
   → stopTracking()
   → POST /api/reels/track-view
3.3 Feed Yenileme
1. Kullanıcı scroll yapar (infinite scroll)
   → GET /api/reels/feed?cursor=last_reel_id
   
2. Ya da manuel refresh
   → GET /api/reels/feed

4. API ENDPOINT'LERİ
4.1 Feed Endpoint (Ana)
GET /api/reels/feed
Kullanıcıya özel personalized feed döndürür.
Query Parameters:
limit: int (1-50, default: 20)
cursor: string (pagination için, optional)
Headers:
X-User-ID: required
Response:
json{
  "success": true,
  "reels": [
    {
      "id": "reel_abc123",
      "news_data": {
        "title": "Dolar rekor kırdı",
        "summary": "Dolar/TL kuru 35 liraya yükseldi",
        "full_content": [
          "Paragraf 1...",
          "Paragraf 2..."
        ],
        "url": "https://aa.com.tr/...",
        "category": "ekonomi",
        "keywords": ["dolar", "ekonomi", "kur"],
        "images": ["image1.jpg"],
        "published_at": "2025-10-04T10:00:00Z"
      },
      "audio_url": "/audio/reel_abc123.mp3",
      "duration_seconds": 45,
      "is_watched": false,
      "is_trending": false,
      "is_fresh": true,
      "is_recommended": true,
      "recommendation_score": 0.89,
      "recommendation_reason": "nlp_similarity"
    }
  ],
  "pagination": {
    "current_page": 1,
    "has_next": true,
    "next_cursor": "reel_xyz789",
    "total_available": 150
  },
  "feed_metadata": {
    "trending_count": 0,
    "personalized_count": 17,
    "fresh_count": 0,
    "exploration_count": 3,
    "personalization_level": "hot"
  }
}
Frontend Kullanımı:
javascriptasync function loadFeed(cursor = null) {
  const url = cursor 
    ? `/api/reels/feed?limit=20&cursor=${cursor}`
    : '/api/reels/feed?limit=20';
  
  const response = await fetch(url, {
    headers: { 'X-User-ID': userId }
  });
  
  const data = await response.json();
  
  // Reels'leri render et
  data.reels.forEach(reel => {
    renderReel(reel);
  });
  
  // Pagination
  if (data.pagination.has_next) {
    nextCursor = data.pagination.next_cursor;
  }
  
  // Personalization seviyesini göster (optional)
  console.log('Level:', data.feed_metadata.personalization_level);
}

4.2 Track View (İzleme Kaydı)
POST /api/reels/track-view
Her reel izlendiğinde çağrılır.
Headers:
X-User-ID: required
Content-Type: application/json
Request Body:
json{
  "reel_id": "reel_abc123",
  "duration_ms": 35000,
  "completed": true,
  "category": "ekonomi",
  "session_id": "session_xyz",
  "emoji_reaction": "❤️",
  "paused_count": 2,
  "replayed": false,
  "shared": false,
  "saved": false
}
Field Açıklamaları:

reel_id: İzlenen reel ID (zorunlu)
duration_ms: İzleme süresi milisaniye (zorunlu)
completed: %80+ izlendi mi (zorunlu)
emoji_reaction: Emoji (opsiyonel, "❤️", "👍", "🔥" vs)
paused_count: Kaç kere duraklattı
replayed: Tekrar oynat tıkladı mı
shared: Paylaştı mı
saved: Kaydetti mi

Response:
json{
  "success": true,
  "message": "View tracked successfully",
  "view_id": "view_123",
  "meaningful_view": true,
  "engagement_score": 1.2,
  "personalization_level": "warm",
  "total_interactions": 25
}
Frontend Kullanımı:
javascriptclass ReelTracker {
  constructor(reelId) {
    this.reelId = reelId;
    this.startTime = Date.now();
    this.pauseCount = 0;
    this.emojiReaction = null;
  }
  
  onPause() {
    this.pauseCount++;
  }
  
  onEmoji(emoji) {
    this.emojiReaction = emoji;
  }
  
  async stop(completed) {
    const duration = Date.now() - this.startTime;
    
    await fetch('/api/reels/track-view', {
      method: 'POST',
      headers: {
        'X-User-ID': userId,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        reel_id: this.reelId,
        duration_ms: duration,
        completed: completed,
        emoji_reaction: this.emojiReaction,
        paused_count: this.pauseCount
      })
    });
  }
}

// Kullanım:
const tracker = new ReelTracker('reel_abc123');
// ... audio oynatılır ...
tracker.onPause(); // Duraklama
tracker.onEmoji('❤️'); // Emoji
await tracker.stop(true); // Bitir

4.3 Track Detail View (Detay Okuma)
POST /api/reels/track-detail-view
Kullanıcı "Detayları Oku" tıklayınca çağrılır.
Request Body:
json{
  "reel_id": "reel_abc123",
  "read_duration_ms": 45000,
  "scroll_depth": 0.8,
  "shared_from_detail": false,
  "saved_from_detail": false,
  "session_id": "session_xyz"
}
Field Açıklamaları:

read_duration_ms: Detayda kaç ms kaldı
scroll_depth: Ne kadar scroll yaptı (0-1 arası)
shared_from_detail: Detaydan paylaştı mı
saved_from_detail: Detaydan kaydetti mi

Response:
json{
  "success": true,
  "message": "Detail view tracked successfully",
  "meaningful_read": true,
  "engagement_score": 0.75,
  "boost_applied": true
}
Frontend Kullanımı:
javascriptclass DetailTracker {
  constructor(reelId) {
    this.reelId = reelId;
    this.openedAt = Date.now();
    this.maxScroll = 0;
  }
  
  onScroll(scrollPercentage) {
    this.maxScroll = Math.max(this.maxScroll, scrollPercentage);
  }
  
  async close() {
    const duration = Date.now() - this.openedAt;
    
    await fetch('/api/reels/track-detail-view', {
      method: 'POST',
      headers: {
        'X-User-ID': userId,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        reel_id: this.reelId,
        read_duration_ms: duration,
        scroll_depth: this.maxScroll / 100
      })
    });
  }
}

// Kullanım:
function openDetailModal(reel) {
  const tracker = new DetailTracker(reel.id);
  
  // Modal aç
  showModal(reel);
  
  // Scroll tracking
  modalElement.addEventListener('scroll', (e) => {
    const scrollPercentage = (e.target.scrollTop / e.target.scrollHeight) * 100;
    tracker.onScroll(scrollPercentage);
  });
  
  // Modal kapanınca
  modalElement.addEventListener('close', () => {
    tracker.close();
  });
}

4.4 User Stats (Kullanıcı İstatistikleri)
GET /api/reels/user/{user_id}/stats
Kullanıcının genel istatistikleri.
Response:
json{
  "success": true,
  "data": {
    "user_id": "user_12345",
    "total_reels_watched": 47,
    "total_screen_time_ms": 2100000,
    "completion_rate": 0.78,
    "favorite_categories": ["ekonomi", "teknoloji"],
    "current_streak_days": 5
  }
}

4.5 Preference Stats (Tercih İstatistikleri)
GET /api/reels/user/{user_id}/preference-stats
Kullanıcının öğrenilen tercihleri (debug için).
Response:
json{
  "success": true,
  "data": {
    "user_id": "user_12345",
    "personalization_level": "hot",
    "total_interactions": 47,
    "top_categories": [
      {"name": "ekonomi", "score": 0.85},
      {"name": "teknoloji", "score": 0.65}
    ],
    "top_keywords": [
      {"keyword": "dolar", "score": 0.92},
      {"keyword": "faiz", "score": 0.88}
    ],
    "last_updated": "2025-10-04T15:30:00Z"
  }
}

5. TRACKING SİSTEMİ
5.1 Tracking Zamanlaması
Continuous Tracking (Her 5 saniye):
javascriptclass ContinuousTracker {
  constructor(reelId) {
    this.reelId = reelId;
    this.startTime = Date.now();
    this.intervalId = null;
  }
  
  start() {
    // Her 5 saniyede lokal state güncelle
    this.intervalId = setInterval(() => {
      const duration = Date.now() - this.startTime;
      console.log(`Tracked: ${duration}ms`);
      // localStorage'a yaz (offline support için)
      this.saveToLocal();
    }, 5000);
  }
  
  stop() {
    clearInterval(this.intervalId);
    // Backend'e son tracking'i gönder
    this.sendToBackend();
  }
  
  saveToLocal() {
    const data = {
      reelId: this.reelId,
      duration: Date.now() - this.startTime,
      timestamp: Date.now()
    };
    localStorage.setItem('tracking_' + this.reelId, JSON.stringify(data));
  }
  
  async sendToBackend() {
    // ... POST /track-view ...
  }
}
5.2 Emoji Tracking
Kullanıcı emoji attığında:
javascriptfunction onEmojiClick(emoji) {
  // 1. UI'da emoji göster
  showEmojiAnimation(emoji);
  
  // 2. Tracker'a kaydet
  currentTracker.onEmoji(emoji);
  
  // 3. Hemen backend'e gönder (optional, stop() sırasında da gönderilir)
  // İstersen hemen gönder:
  await fetch('/api/reels/track-view', {
    method: 'POST',
    body: JSON.stringify({
      reel_id: currentReel.id,
      duration_ms: Date.now() - currentTracker.startTime,
      completed: false,
      emoji_reaction: emoji
    })
  });
}
5.3 Offline Support
Bağlantı yoksa tracking'i sakla:
javascriptfunction queueTracking(trackingData) {
  const queue = JSON.parse(localStorage.getItem('tracking_queue') || '[]');
  queue.push(trackingData);
  localStorage.setItem('tracking_queue', JSON.stringify(queue));
}

// Bağlantı gelince gönder
window.addEventListener('online', async () => {
  const queue = JSON.parse(localStorage.getItem('tracking_queue') || '[]');
  
  for (const data of queue) {
    await fetch('/api/reels/track-view', {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }
  
  localStorage.removeItem('tracking_queue');
});

6. PERSONALIZATION SEVİYELERİ
6.1 Cold Start (0-10 etkileşim)
Davranış:

%70 trending reels
%30 fresh (son 3 saat)
Kategori çeşitliliği yüksek

Frontend'de gösterim:
javascriptif (feedMetadata.personalization_level === 'cold') {
  // "Popüler haberler gösteriliyor" badge
  showBadge('Popüler Haberler');
}
6.2 Warm (10-50 etkileşim)
Davranış:

%80 tercih edilen kategoriler
%20 keşfet
Rule-based matching

Frontend'de gösterim:
javascriptif (feedMetadata.personalization_level === 'warm') {
  // "Size özel seçildi" badge
  showBadge('Size Özel');
}
6.3 Hot (50+ etkileşim)
Davranış:

%85 NLP benzerlik
%15 keşfet
Maksimum personalization

Frontend'de gösterim:
javascriptif (feedMetadata.personalization_level === 'hot') {
  // "İlginizi çekebilir" badge + recommendation_score göster
  showBadge('İlginizi Çekebilir');
  
  if (reel.recommendation_score > 0.8) {
    showHighMatchIndicator(); // Yıldız icon vs
  }
}

7. HATA YÖNETİMİ
7.1 Network Hataları
javascriptasync function fetchFeedWithRetry(retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch('/api/reels/feed', {
        headers: { 'X-User-ID': userId }
      });
      
      if (response.ok) {
        return await response.json();
      }
      
      // 5xx hatası, retry yap
      if (response.status >= 500) {
        await sleep(1000 * (i + 1)); // Exponential backoff
        continue;
      }
      
      // 4xx hatası, retry yapma
      throw new Error(`HTTP ${response.status}`);
      
    } catch (error) {
      if (i === retries - 1) throw error;
      await sleep(1000 * (i + 1));
    }
  }
}
7.2 Fallback Content
javascriptasync function loadFeedWithFallback() {
  try {
    return await fetchFeed();
  } catch (error) {
    console.error('Feed load failed:', error);
    
    // Fallback: Cache'den yükle
    const cachedFeed = localStorage.getItem('last_feed');
    if (cachedFeed) {
      return JSON.parse(cachedFeed);
    }
    
    // Fallback 2: Boş state göster
    return {
      success: false,
      reels: [],
      message: 'Bağlantı hatası. Lütfen tekrar deneyin.'
    };
  }
}

8. ÖRNEKLER
8.1 Tam Reel İzleme Akışı
javascript// ReelPlayer.js
class ReelPlayer {
  constructor(reel) {
    this.reel = reel;
    this.tracker = new ReelTracker(reel.id);
    this.detailTracker = null;
    this.audioElement = null;
  }
  
  async play() {
    // 1. Audio başlat
    this.audioElement = new Audio(this.reel.audio_url);
    this.audioElement.play();
    
    // 2. Tracking başlat
    this.tracker.start();
    
    // 3. Event listeners
    this.audioElement.addEventListener('pause', () => {
      this.tracker.onPause();
    });
    
    this.audioElement.addEventListener('ended', () => {
      this.stop(true);
    });
  }
  
  onEmojiClick(emoji) {
    this.tracker.onEmoji(emoji);
    // UI'da göster
    this.showEmojiAnimation(emoji);
  }
  
  openDetail() {
    this.detailTracker = new DetailTracker(this.reel.id);
    
    // Modal aç
    const modal = document.getElementById('detail-modal');
    modal.style.display = 'block';
    
    // Scroll tracking
    modal.addEventListener('scroll', (e) => {
      const scrollPercentage = (e.target.scrollTop / e.target.scrollHeight) * 100;
      this.detailTracker.onScroll(scrollPercentage);
    });
  }
  
  closeDetail() {
    if (this.detailTracker) {
      this.detailTracker.close();
      this.detailTracker = null;
    }
  }
  
  async stop(completed) {
    this.audioElement.pause();
    await this.tracker.stop(completed);
    
    // Sonraki reel'e geç
    this.onReelComplete();
  }
  
  onReelComplete() {
    // Trigger feed reload veya next reel
    window.dispatchEvent(new CustomEvent('reel-completed'));
  }
}

// Kullanım:
const player = new ReelPlayer(currentReel);
player.play();

// Emoji butonu
emojiButton.addEventListener('click', () => {
  player.onEmojiClick('❤️');
});

// Detay butonu
detailButton.addEventListener('click', () => {
  player.openDetail();
});
8.2 Infinite Scroll Feed
javascript// FeedManager.js
class FeedManager {
  constructor() {
    this.reels = [];
    this.cursor = null;
    this.loading = false;
  }
  
  async loadInitial() {
    this.reels = [];
    this.cursor = null;
    await this.loadMore();
  }
  
  async loadMore() {
    if (this.loading) return;
    this.loading = true;
    
    try {
      const url = this.cursor 
        ? `/api/reels/feed?limit=20&cursor=${this.cursor}`
        : '/api/reels/feed?limit=20';
      
      const response = await fetch(url, {
        headers: { 'X-User-ID': userId }
      });
      
      const data = await response.json();
      
      // Reels'leri ekle
      this.reels.push(...data.reels);
      
      // Cursor güncelle
      if (data.pagination.has_next) {
        this.cursor = data.pagination.next_cursor;
      } else {
        this.cursor = null;
      }
      
      // UI güncelle
      this.renderReels(data.reels);
      
      // Cache'e kaydet
      localStorage.setItem('last_feed', JSON.stringify(data));
      
    } catch (error) {
      console.error('Load more failed:', error);
    } finally {
      this.loading = false;
    }
  }
  
  renderReels(reels) {
    const container = document.getElementById('reels-container');
    
    reels.forEach(reel => {
      const reelElement = this.createReelElement(reel);
      container.appendChild(reelElement);
    });
  }
  
  createReelElement(reel) {
    // Reel card oluştur
    const card = document.createElement('div');
    card.className = 'reel-card';
    card.innerHTML = `
      <img src="${reel.news_data.images[0] || 'placeholder.jpg'}">
      <h3>${reel.news_data.title}</h3>
      <p>${reel.news_data.summary}</p>
      <div class="badges">
        ${reel.is_fresh ? '<span class="badge">Yeni</span>' : ''}
        ${reel.is_trending ? '<span class="badge">Popüler</span>' : ''}
        ${reel.is_recommended ? '<span class="badge">Size Özel</span>' : ''}
      </div>
      <button class="play-btn">Dinle</button>
    `;
    
    // Play button
    card.querySelector('.play-btn').addEventListener('click', () => {
      this.playReel(reel);
    });
    
    return card;
  }
  
  playReel(reel) {
    const player = new ReelPlayer(reel);
    player.play();
  }
  
  setupInfiniteScroll() {
    window.addEventListener('scroll', () => {
      const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
      
      // %80'e ulaşınca yeni reels yükle
      if (scrollTop + clientHeight >= scrollHeight * 0.8) {
        this.loadMore();
      }
    });
  }
}

// Başlatma:
const feedManager = new FeedManager();
feedManager.loadInitial();
feedManager.setupInfiniteScroll();

9. PERFORMANS OPTİMİZASYONU
9.1 Caching Stratejisi
javascript// Feed cache (5 dakika TTL)
class FeedCache {
  constructor() {
    this.cache = new Map();
    this.TTL = 5 * 60 * 1000; // 5 dakika
  }
  
  set(key, value) {
    this.cache.set(key, {
      data: value,
      timestamp: Date.now()
    });
  }
  
  get(key) {
    const cached = this.cache.get(key);
    if (!cached) return null;
    
    // TTL kontrolü
    if (Date.now() - cached.timestamp > this.TTL) {
      this.cache.delete(key);
      return null;
    }
    
    return cached.data;
  }
}

const feedCache = new FeedCache();

async function fetchFeed() {
  const cacheKey = `feed_${userId}`;
  const cached = feedCache.get(cacheKey);
  
  if (cached) {
    console.log('Feed from cache');
    return cached;
  }
  
  const data = await fetch('/api/reels/feed').then(r => r.json());
  feedCache.set(cacheKey, data);
  return data;
}
9.2 Batch Tracking
javascript// Tracking batch'leme (10 saniyede bir)
class BatchTracker {
  constructor() {
    this.queue = [];
    this.interval = null;
  }
  
  start() {
    this.interval = setInterval(() => {
      this.flush();
    }, 10000); // 10 saniye
  }
  
  add(trackingData) {
    this.queue.push(trackingData);
    
    // Queue çok büyüdüyse hemen flush
    if (this.queue.length > 10) {
      this.flush();
    }
  }
  
  async flush() {
    if (this.queue.length === 0) return;
    
    const batch = [...this.queue];
    this.queue = [];
    
    // Her birini gönder (ya da batch endpoint yap)
    for (const data of batch) {
      await fetch('/api/reels/track-view', {
        method: 'POST',
        body: JSON.stringify(data)
      });
    }
  }
}

10. GÜVENLİK
10.1 Rate Limiting
Backend'de rate limit var (100 req/saat). Frontend'de:
javascriptclass RateLimiter {
  constructor(maxRequests = 100, windowMs = 3600000) {
    this.maxRequests = maxRequests;
    this.windowMs = windowMs;
    this.requests = [];
  }
  
  canMakeRequest() {
    const now = Date.now();
    
    // Eski requestleri temizle
    this.requests = this.requests.filter(
      t => now - t < this.windowMs
    );
    
    // Limit kontrolü
    if (this.requests.length >= this.maxRequests) {
      return false;
    }
    
    this.requests.push(now);
    return true;
  }
}

const limiter = new RateLimiter();

async function safeFetch(url, options) {
  if (!limiter.canMakeRequest()) {
    throw new Error('Rate limit exceeded');
  }
  
  return fetch(url, options);
}

11. TEST SENARYOLARI
Test 1: Yeni Kullanıcı
javascript// 1. User ID oluştur
// 2. Feed yükle (cold start)
// 3. İlk reel'i izle (tracking)
// 4. Emoji at
// 5. Feed refresh (hala cold)
Test 2: Aktif Kullanıcı
javascript// 1. 60+ reel izlenmiş user
// 2. Feed yükle (hot level)
// 3. recommendation_score kontrol et
// 4. Detail oku (boost)
// 5. Preference stats kontrol et
Test 3: Offline → Online
javascript// 1. Offline yap
// 2. Reel izle (tracking queue'ya gir)
// 3. Online yap
// 4. Queue flush edilmeli

12. SORUN GİDERME
Sorun: Feed boş dönüyor
Çözüm: Backend'de yeterli PUBLISHED reel yok. /bulk-create çağır.
Sorun: Personalization çalışmıyor
Çözüm: Tracking doğru çalışıyor mu kontrol et. /user/{id}/preference-stats kontrol et.
Sorun: NLP skorları hep 0.5
Çözüm: NLP fitted değil. 50+ reel oluştur, refit bekle.
Sorun: Feed sürekli aynı reels
Çözüm: max_age_days çok kısa olabilir. Backend'de 3 gün → 7 güne çıkar.

İLETİŞİM
Backend logs: console.log çıktılarını takip et
Debug endpoint: GET /api/reels/system/nlp-stats